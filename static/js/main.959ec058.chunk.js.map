{"version":3,"sources":["logo.svg","components/NavigationBarComponent.js","components/JumbotronComponent.js","components/CardComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBarComponent","JumbotronComponent","state","data","hover","toggleColor","bind","stopToggle","sleep","time","Promise","resolve","setTimeout","this","setState","console","log","then","className","Jumbotron","fluid","Container","onMouseEnter","onMouseLeave","Component","CardComponent","style","display","alignItems","justifyContent","Card","width","Body","Title","Text","App","src","logo","alt","left","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,gRC2B5BC,I,yFC+BAC,E,YAnDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAACC,KAAM,8BAA+BC,MAAO,SAC1D,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBALD,E,mEASPG,GACL,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,Q,oCAIvC,IAAD,OACZI,KAAKC,SAAS,CAACX,KAAM,8BAA+BC,MAAO,SAAS,WAClEW,QAAQC,IAAI,qBAAsB,EAAKd,MAAME,OAE7C,EAAKI,MAAM,KAAKS,MAAK,WAEnB,EAAKH,SAAS,CAACX,KAAM,8BAA+BC,MAAO,kB,mCAM/DW,QAAQC,IAAI,YACZH,KAAKC,SAAS,CAACX,KAAM,8BAA+BC,MAAO,Y,+BAI3D,OACE,yBAAKc,UAAU,+BACX,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACF,UAAU,sBACzB,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,wBAAIH,UAAWL,KAAKX,MAAMC,KAAMmB,aAAcT,KAAKR,YAAakB,aAAcV,KAAKN,YAAnF,yB,GAtCiBiB,a,kCC4BlBC,MA7Bf,WACE,OACE,yBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBX,UAAU,iBAEV,kBAACY,EAAA,EAAD,CAAMJ,MAAO,CAAEK,MAAO,UAAYb,UAAU,iBAI1C,kBAACY,EAAA,EAAKE,KAAN,CAAWd,UAAU,iBACnB,kBAACY,EAAA,EAAKG,MAAN,CAAYf,UAAU,uBAAsB,wCAC5C,kBAACY,EAAA,EAAKI,KAAN,CAAWhB,UAAU,sBAArB,yEACsE,uBAAGA,UAAU,0BAAb,4BADtE,uCAEkC,uBAAGA,UAAU,0BAAb,eAFlC,2VAKsE,uBAAGA,UAAU,0BAAb,qDALtE,SCQKiB,MAlBf,WACE,OACE,yBAAKjB,UAAU,OAKb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,UAE3C,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,EAAD,SCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.959ec058.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\nfunction NavigationBarComponent() {\n  return (\n    <div className=\"NavigationBarComponent\">\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#home\">Home</Nav.Link>\n                <Nav.Link href=\"#link\">Link</Nav.Link>\n                <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                </NavDropdown>\n            </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </div>\n  );\n}\n\nexport default NavigationBarComponent;","import React, { Component } from 'react';\nimport { Container, Jumbotron } from 'react-bootstrap';\nimport './JumbotronComponent.css';\nimport Zoom from 'react-reveal/Zoom';\n\nclass JumbotronComponent extends Component {\n\n  constructor() {\n    super();\n    this.state = {data: 'JumbotronComponent-heading1', hover: 'false'};\n    this.toggleColor = this.toggleColor.bind(this);\n    this.stopToggle = this.stopToggle.bind(this);\n    this.sleep = this.sleep.bind(this);\n  }\n\n  // sleep time expects milliseconds\n  sleep (time) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n  }\n\n\n  toggleColor() {\n    this.setState({data: 'JumbotronComponent-heading2', hover: 'true'}, () => {\n      console.log(\"setState completed\", this.state.hover);\n      // Usage!\n      this.sleep(200).then(() => {\n        // Do something after the sleep!\n        this.setState({data: 'JumbotronComponent-heading1', hover: 'false'});\n      });\n    });\n  }\n\n  stopToggle() {\n    console.log('blocking');\n    this.setState({data: 'JumbotronComponent-heading1', hover: 'false'})\n  }\n\n  render() {\n    return (\n      <div className=\"JumbotronComponent-heading1\">\n          <Jumbotron fluid className=\"JumbotronComponent\">\n            <Container>\n              <Zoom>\n                <h1 className={this.state.data} onMouseEnter={this.toggleColor} onMouseLeave={this.stopToggle}>Sandeep Sunny</h1>\n              </Zoom>\n              {/*\n                <p className=\"JumbotronComponent-text\">\n                  Computer man\n                </p>\n              */}\n            </Container>\n          </Jumbotron>\n      </div>\n    );\n  }\n}\n\n\nexport default JumbotronComponent;","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport \"./CardComponent.css\";\n\nfunction CardComponent() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n      className=\"CardComponent\"\n    >\n      <Card style={{ width: \"100rem\" }} className=\"CardComponent\">\n        {/*\n                <Card.Img variant=\"top\" src=\"assets/images/avatar-placeholder.png\" />\n        */}\n        <Card.Body className=\"CardComponent\">\n          <Card.Title className=\"CardComponent-title\"><b>ABOUT ME</b></Card.Title>\n          <Card.Text className=\"CardComponent-text\">\n          I am Sandeep. I am pursuing my Master's degree in Computer Science at <b className=\"CardComponent-textblue\">Arizona State University</b>. \n          Prior to joining ASU, I worked at <b className=\"CardComponent-textblue\">VMware Inc.</b> as a Software Development Engineer for about three years. \n          At VMware, I developed features for a policy based storage management solution for cloud infrastructure administrators. \n          I enjoy solving problems with code and learning about and experimenting with new technologies. \n          Currently, I am working towards building my expertise in the field of <b className=\"CardComponent-textpink\">Distributed Software Development and Data Science</b>.\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default CardComponent;\n","import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavigationBarComponent from './components/NavigationBarComponent';\nimport JumbotronComponent from './components/JumbotronComponent';\nimport AccordionComponent from './components/AccordionComponent';\nimport Fade from 'react-reveal/Zoom';\nimport CardComponent from './components/CardComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/*\n        <NavigationBarComponent />\n        <AccordionComponent />\n      */}\n      <JumbotronComponent />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Fade left>\n        <CardComponent />\n      </Fade>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}